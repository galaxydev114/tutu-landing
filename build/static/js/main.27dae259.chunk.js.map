{"version":3,"sources":["appRedux/reducers/index.js","appRedux/store/index.js","pages/Home.jsx","routes/index.js","containers/Footer.jsx","containers/App.jsx","NextApp.js","serviceWorker.js","reportWebVitals.js","index.js"],"names":["createRootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","require","routeMiddleware","routerMiddleware","middlewares","thunk","configureStore","preloadedState","createStore","compose","applyMiddleware","Home","RegularRoute","Component","component","rest","render","props","Router","match","exact","path","Footer","store","App","useRouteMatch","NextApp","Boolean","window","location","hostname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navigator","serviceWorker","ready","registration","unregister","ReactDOM","StrictMode","document","getElementById"],"mappings":"mOAUeA,EALW,SAACC,GAAD,OAAaC,YAAgB,CACrDC,OAAQC,YAAcH,MCEXA,GAAUI,EAHMC,EAAQ,GAAWD,wBAK1CE,EAAkBC,YAAiBP,GAEnCQ,EAAc,CAACC,IAAOH,GAGb,SAASI,EAAeC,GAYrC,OAXcC,YACZb,EAAkBC,GAClBW,EACAE,YACEC,IAAe,WAAf,GACEP,YAAiBP,IADnB,OAEKQ,M,2BCpBI,SAASO,IACtB,OACE,6B,oBCoBEC,EAAe,SAAC,GAAD,IAAaC,EAAb,EAAEC,UAAyBC,EAA3B,wBACnB,cAAC,IAAD,2BAAWA,GAAX,IAAiBC,OAAQ,SAAAC,GAAK,OAAI,cAACJ,EAAD,eAAeI,SASpCC,EANA,SAAC,GAAD,EAAEC,MAAF,OACb,cAAC,IAAD,UACE,cAAC,EAAD,CAAcC,OAAK,EAACC,KAAK,IAAIP,UAAWH,OC5B7B,SAASW,IACtB,OACE,6BCOJ,IAAMC,EAAQjB,IAgBCkB,EAdH,WACV,IAAML,EAAQM,cAEd,OACE,cAAC,IAAD,CAAUF,MAAOA,EAAjB,SACE,eAAC,IAAD,CAAiB3B,QAASA,EAA1B,UACE,cAAC,EAAD,CAAQuB,MAAOA,IACf,cAACG,EAAD,UCZFC,EAAQjB,IAWCoB,EATC,kBACd,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAiB3B,QAASA,EAA1B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOyB,KAAK,IAAIP,UAAWU,WCDfG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MAAM,2DClBnC,ICQeN,EDIAkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,ODoHR,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMR,MAAK,SAAAS,GACjCA,EAAaC,gBEpGnBb,IAjBelB,EAoBRa,EAnBLmB,IAAS7B,OACP,cAAC,IAAM8B,WAAP,UACE,cAACjC,EAAD,MAEFkC,SAASC,eAAe,W","file":"static/js/main.27dae259.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nimport { connectRouter } from 'connected-react-router'\r\n// import Auth from \"./Auth\";\r\n\r\n\r\nconst createRootReducer = (history) => combineReducers({\r\n  router: connectRouter(history),\r\n  // auth: Auth,\r\n})\r\n\r\nexport default createRootReducer\r\n","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport { routerMiddleware } from 'connected-react-router'\r\nimport thunk from 'redux-thunk'\r\nimport createRootReducer from '../reducers'\r\n\r\nconst createBrowserHistory = require('history').createBrowserHistory\r\n\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nconst routeMiddleware = routerMiddleware(history)\r\n\r\nconst middlewares = [thunk, routeMiddleware]\r\n\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    createRootReducer(history), // root reducer with router state\r\n    preloadedState,\r\n    compose(\r\n      applyMiddleware(\r\n        routerMiddleware(history), // for dispatching history actions\r\n        ...middlewares\r\n      ),\r\n    ),\r\n  )\r\n\r\n  return store\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Home() {\r\n  return (\r\n    <>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport {\r\n  // Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport Home from '../pages/Home'\r\n\r\n// const PrivateRoute = ({component: Component, location, authUser, ...rest}) => {\r\n//   <Route\r\n//     {...rest}\r\n//     render={props =>\r\n//       authUser\r\n//         ? <Component {...props} />\r\n//         : <Redirect\r\n//           to={{\r\n//             pathname: '/signin',\r\n//             state: {from: location}\r\n//           }}\r\n//         />}\r\n//   />\r\n// };\r\n\r\nconst RegularRoute = ({component: Component, ...rest}) => (\r\n  <Route {...rest} render={props => <Component {...props} />}/>\r\n)\r\n\r\nconst Router = ({match}) => (\r\n  <Switch>\r\n    <RegularRoute exact path='/' component={Home}/>\r\n  </Switch>\r\n)\r\n\r\nexport default Router","import React from 'react'\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <>\r\n      \r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport configureStore, { history } from '../appRedux/store'\r\n\r\nimport Router from '../routes/index'\r\n\r\nimport Footer from './Footer'\r\n\r\n\r\nconst store = configureStore(/* provide initial state if any */)\r\n\r\nconst App = () => {\r\n  const match = useRouteMatch()\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedRouter history={history}>\r\n        <Router match={match}/>\r\n        <Footer/>\r\n      </ConnectedRouter>\r\n    </Provider>\r\n  )\r\n}\r\n\r\n\r\nexport default App","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport './assets/styles/styles.scss'\r\nimport configureStore, { history } from './appRedux/store'\r\nimport App from './containers/App'\r\n\r\nconst store = configureStore(/* provide initial state if any */)\r\n\r\nconst NextApp = () =>\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <Switch>\r\n        <Route path='/' component={App}/>\r\n      </Switch>\r\n    </ConnectedRouter>\r\n  </Provider>\r\n\r\nexport default NextApp\r\n","/*eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker === null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport NextApp from './NextApp'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\n// Wrap the rendering in a function\r\nconst render = Component => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Component/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  )\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n\r\n// Render once\r\nrender(NextApp)\r\n\r\n"],"sourceRoot":""}